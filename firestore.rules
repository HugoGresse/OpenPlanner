rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {

        // Common
        function authenticated() { return request.auth.uid != null; }

        function eventData(eventId) { return get(/databases/$(database)/documents/events/$(eventId)).data; }
        function isAdmin(data) { return data.owner == request.auth.uid || request.auth.uid in data.members;}

        match /events/{eventId} {
            allow read: if authenticated() && isAdmin(resource.data);
            allow create: if authenticated();
            allow write: if authenticated() && isAdmin(resource.data);

            match /sessions/{sessionId} {
                allow create: if authenticated();
                allow write: if authenticated() && isAdmin(eventData(eventId));
            }
            match /speakers/{speakerId} {
                allow create: if authenticated();
                allow write: if authenticated() && isAdmin(eventData(eventId));
            }
            match /sponsors/{sponsorId} {
                allow create: if authenticated();
                allow write: if authenticated() && isAdmin(eventData(eventId));
            }
            match /schedule/{scheduleId} {
                allow create: if authenticated();
                allow write: if authenticated() && isAdmin(eventData(eventId));
            }

        }

    }
}
