import * as React from 'react'
import { Event } from '../../../types'
import { yupResolver } from '@hookform/resolvers/yup'
import { Card, Grid, Typography } from '@mui/material'
import { FormContainer, TextFieldElement, useForm } from 'react-hook-form-mui'
import LoadingButton from '@mui/lab/LoadingButton'
import * as yup from 'yup'
import { slugify } from '../../../utils/slugify'
import { TrackFields } from './components/TrackFields'
import { WebhooksFields } from './components/WebhooksFields'
import { collections } from '../../../services/firebase'
import { useFirestoreDocumentMutation } from '@react-query-firebase/firestore'
import { doc } from 'firebase/firestore'

const schema = yup
    .object({
        name: yup.string().required(),
    })
    .required()

export type EventSettingsProps = {
    event: Event
    eventUpdated: () => Promise<any>
}
export const EventSettings = ({ event, eventUpdated }: EventSettingsProps) => {
    const mutation = useFirestoreDocumentMutation(doc(collections.events, event.id), {
        merge: true,
    })

    const formContext = useForm({
        defaultValues: event,
    })
    const { control, formState, reset } = formContext

    return (
        <FormContainer
            formContext={formContext}
            resolver={yupResolver(schema)}
            onSuccess={async (data) => {
                const eventName = data.name
                const tracks = data.tracks
                    .filter((track) => track.name && track.name.trim().length > 0)
                    .map((track) => ({
                        name: track.name.trim(),
                        id: track.id.startsWith('autogenerated-') ? slugify(track.name.trim()) : track.id,
                    }))
                const webhooks = data.webhooks.map((webhook) => {
                    if (event.webhooks.find((w) => w.url === webhook.url)) {
                        return webhook
                    }
                    return {
                        url: webhook.url.trim(),
                        lastAnswer: undefined,
                    }
                })

                return mutation.mutateAsync(
                    {
                        ...event,
                        name: eventName,
                        tracks,
                        webhooks,
                    },
                    {
                        async onSuccess() {
                            eventUpdated().then((result) => reset(result.data))
                        },
                    }
                )

                // console.log("save", tracks)
                // return await updateEvent({
                //     id: event.id,
                //     name: eventName,
                //     tracks,
                //     webhooks
                // }).then((error) => {
                //     return eventUpdated().then((newEventResult) => {
                //         console.log(newEventResult.data.tracks)
                //         reset(newEventResult.data)
                //     })
                // })
            }}>
            <Typography component="h1" variant="h5">
                Event settings
            </Typography>
            <Grid container spacing={2} component={Card}>
                <Grid item xs={6}>
                    <TextFieldElement
                        margin="normal"
                        required
                        fullWidth
                        id="name"
                        label="Event name"
                        name="name"
                        variant="filled"
                        disabled={formState.isSubmitting}
                    />

                    <TrackFields control={control} isSubmitting={formState.isSubmitting} />

                    <WebhooksFields control={control} isSubmitting={formState.isSubmitting} />
                </Grid>

                <Grid item xs={12}>
                    <LoadingButton
                        type="submit"
                        disabled={formState.isSubmitting}
                        loading={formState.isSubmitting}
                        fullWidth
                        variant="contained"
                        sx={{ mt: 2, mb: 2 }}>
                        Save
                    </LoadingButton>
                </Grid>
            </Grid>
        </FormContainer>
    )
}
